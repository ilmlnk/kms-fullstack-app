// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Main 

model Subject {
  id              Int       @id @default(autoincrement())
  object_id       String?   @unique
  author_id       String    @unique
  tenant_id       String    @unique
  creation_date   DateTime
  updating_date   DateTime? @updatedAt
  deleted         Boolean?  @default(false)
  version_counter Int?
  title           String
  description     String?
  image_url       String?
  is_published    Boolean?  @default(false)

  category_id String?
  category    Category? @relation(fields: [categoryId], references: [id])

  children    Child[]
  attachments Attachment[]
  Event       Event[]
  categoryId  Int?
  Attendance  Attendance[]

  @@index([category_id])
}

model Event {
  id              Int       @id @default(autoincrement())
  object_id       String    @unique
  author_id       String    @unique
  tenant_id       String    @unique
  creation_date   DateTime
  updating_date   DateTime? @updatedAt
  deleted         Boolean?  @default(false)
  version_counter Int?
  title           String
  subject         Subject?  @relation(fields: [subjectId], references: [id])
  subjectId       Int?
  starting_date   DateTime
  ending_date     DateTime
  type            String?
  description     String?
  teacher         Teacher?  @relation(fields: [teacherId], references: [id])
  teacherId       Int?
  group           String?
}

model Group {
  id              Int       @id @default(autoincrement())
  object_id       String    @unique
  author_id       String    @unique
  tenant_id       String    @unique
  creation_date   DateTime
  deleted         Boolean
  version_counter Int?
  name            String
  children        Child[]
  teachers        Teacher[]
}

model Category {
  id              Int       @id @default(autoincrement())
  object_id       String    @unique
  author_id       String    @unique
  tenant_id       String    @unique
  creation_date   DateTime
  deleted         Boolean
  version_counter Int?
  name            String    @unique
  subject         Subject[]
}

model Teacher {
  id                 Int       @id @default(autoincrement())
  object_id          String    @unique
  author_id          String    @unique
  tenant_id          String    @unique
  creation_date      DateTime
  deleted            Boolean
  version_counter    Int?
  first_name         String
  last_name          String
  acception_status   String?   @default("awaited")
  email              String    @unique
  phone_number       String    @unique
  username           String    @unique
  encrypted_password String
  events             Event[]
  accounts           Account[]
  groups             Group[]
  Session            Session[]
}

model Parent {
  id                 Int       @id @default(autoincrement())
  object_id          String?   @unique
  author_id          String?   @unique
  tenant_id          String?   @unique
  creation_date      DateTime?
  deleted            Boolean?
  version_counter    Int?
  first_name         String?
  last_name          String?
  id_code            String?
  email              String?
  phone_number       String?
  username           String?
  encrypted_password String?
  children           Child[]
  accounts           Account[]
  Session            Session[]
}

model Child {
  id                Int          @id @default(autoincrement())
  object_id         String
  author_id         String
  tenant_id         String
  creation_date     DateTime
  deleted           Boolean
  version_counter   Int?
  first_name        String
  last_name         String
  acception_status  String?      @default("awaited")
  attendance_status Attendance[]
  parents           Parent[]
  subject           Subject?     @relation(fields: [subjectId], references: [id])
  subjectId         Int
  Group             Group?       @relation(fields: [groupId], references: [id])
  groupId           Int?
}

model Attendance {
  id              Int      @id @default(autoincrement())
  object_id       String
  author_id       String
  tenant_id       String
  creation_date   DateTime
  deleted         Boolean
  version_counter Int?
  subject_name    String
  subject         Subject? @relation(fields: [subject_id], references: [id])
  child           Child?   @relation(fields: [child_id], references: [id])
  child_id        Int?
  subject_id      Int?
}

model Administrator {
  id                 Int       @id @default(autoincrement())
  object_id          String    @unique
  author_id          String    @unique
  tenant_id          String    @unique
  creation_date      DateTime
  deleted            Boolean
  version_counter    BigInt?
  first_name         String
  last_name          String
  email              String    @unique
  username           String    @unique
  phone_number       String    @unique
  encrypted_password String
  accounts           Account[]
  Session            Session[]
}

enum UserRole {
  ADMIN
  TEACHER
  PARENT
}

model Account {
  id              Int      @id @default(autoincrement())
  object_id       String   @unique
  author_id       String   @unique
  tenant_id       String   @unique
  creation_date   DateTime
  deleted         Boolean
  version_counter Int?
  email           String?
  phone_number    String?
  role            UserRole @default(PARENT)
  username        String
  password        String

  parent          Parent?        @relation(fields: [parentId], references: [id])
  administrator   Administrator? @relation(fields: [administratorId], references: [id])
  teacher         Teacher?       @relation(fields: [teacherId], references: [id])
  parentId        Int?
  administratorId Int?
  teacherId       Int?
}

model Session {
  id Int @id @default(autoincrement())

  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  teacher_id Int?
  teacher    Teacher? @relation(fields: [teacher_id], references: [id])

  parent_id Int?
  parent    Parent? @relation(fields: [parent_id], references: [id])

  admin_id Int?
  admin    Administrator? @relation(fields: [admin_id], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Attachment {
  id              Int      @id @default(autoincrement())
  object_id       String   @unique
  author_id       String   @unique
  tenant_id       String   @unique
  creation_date   DateTime @default(now())
  deleted         Boolean
  version_counter Int?
  name            String
  url             String

  subject_id Int
  subject    Subject? @relation(fields: [subject_id], references: [id], onDelete: Cascade)

  updated_at DateTime @updatedAt

  @@index([subject_id])
}

model Document {
  id              Int      @id @default(autoincrement())
  object_id       String   @unique
  author_id       String   @unique
  tenant_id       String   @unique
  creation_date   DateTime
  deleted         Boolean
  version_counter Int?
}
